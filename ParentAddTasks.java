/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TaskOrganization;

import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author melissacmitchell
 */
public final class ParentAddTasks extends javax.swing.JDialog {

    //creates model
    DefaultTableModel model; 
    
    //all tasks stored in array
    ArrayList<Task> tasks = new ArrayList<>();
    
    //defaults filter to all tasks
    DisplayFilter displayFilter = DisplayFilter.Both;
    
    //defaults categories to all categories
    boolean filterCategories = false;
    Category categoryFilter = null;
    
    //defaults month and year to all
    int monthToFilter = -1;
    int yearToFilter = -1;
    int dayToFilter = -1;
    
    /**
     * Creates new form ParentAddTasks
     * @param parent
     * @param modal
     */
    public ParentAddTasks(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
  
        //sets table columns
        model = new DefaultTableModel();
                    model.addColumn("Month");
                    model.addColumn("Year");
                    model.addColumn("Day");
                    model.addColumn("Authentication?");
                    model.addColumn("Instructions");
                    model.addColumn("Category");
                    model.addColumn("Repeating?");
                    
        //sets model  
        tableParentAddTasks.setModel(model);
        
        //sets column widths
        tableParentAddTasks.getColumnModel().getColumn(0).setPreferredWidth(110);
        tableParentAddTasks.getColumnModel().getColumn(1).setPreferredWidth(75);
        tableParentAddTasks.getColumnModel().getColumn(2).setPreferredWidth(50);
        tableParentAddTasks.getColumnModel().getColumn(3).setPreferredWidth(100);
        tableParentAddTasks.getColumnModel().getColumn(4).setPreferredWidth(350);
        tableParentAddTasks.getColumnModel().getColumn(5).setPreferredWidth(130);
        tableParentAddTasks.getColumnModel().getColumn(6).setPreferredWidth(150);
        
        readFromFile();
        updateDisplay();
}
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        comboBoxDay = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        comboBoxCategory = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboBoxMonth = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        comboBoxYear = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        buttonAdd = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableParentAddTasks = new javax.swing.JTable();
        buttonCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldInstructions = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxRepeat = new javax.swing.JComboBox<>();
        comboBoxAuthentication = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel7.setText("Day Due:");

        comboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel8.setText("Category:");

        comboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Homework", "Crafts", "Housework", "Piano", "Miscellaneous" }));

        jLabel9.setText("Month Due:");

        comboBoxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jLabel10.setText("Year Due:");

        comboBoxYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2020", "2021", "2020", "2023", "2024" }));

        jLabel11.setText("Add Task");

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Add Tasks");

        tableParentAddTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Month", "Year", "Day", "Repeating", "Instructions", "Category", "Authenticate?"
            }
        ));
        tableParentAddTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableParentAddTasksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableParentAddTasks);
        if (tableParentAddTasks.getColumnModel().getColumnCount() > 0) {
            tableParentAddTasks.getColumnModel().getColumn(4).setPreferredWidth(160);
        }

        buttonCancel.setText("Done");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        jLabel3.setText("Instructions:");

        jLabel2.setText("Authentication:");

        jLabel4.setText("Repeats:");

        comboBoxRepeat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));

        comboBoxAuthentication.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fieldInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboBoxAuthentication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(107, 107, 107))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonDelete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonCancel)
                                .addGap(3, 3, 3))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(74, 74, 74))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel11))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(comboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)
                            .addComponent(comboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboBoxAuthentication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(fieldInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 93, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(buttonAdd)
                        .addGap(3, 3, 3)
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonCancel)
                        .addGap(44, 44, 44))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        //get the new task and create any future tasks as necessary
        Task tasksToAdd = getTask();
        
        tasksToAdd.createFuture(tasks);
        
        writeTasks();
        updateDisplay();
        clearDisplay();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:
        //handles when the user presses the update button
        //checks how many rows are selected
        int rowCount = tableParentAddTasks.getSelectedRowCount();
        if (rowCount > 1) {
            //if more than one row is selected, informs user
            JOptionPane.showMessageDialog(null, "You can't update more then one row at a time.", "Invalid Update", 0);
            return;
        }
        
        //update entry
        int rowSelected = tableParentAddTasks.getSelectedRow();

        if (rowSelected == -1) {
            //if no rows are selected, exit
            return;
        }
        
        boolean updateFuture = false;
        
        //gets updated information
        Task task = getTask();
        
        //gets original information and removes data
        Task original = tasks.remove(rowSelected);
        
        //if selection acts on more than one task, ask the user what they want to do
        if (task.repeating || original.repeating) {
            String[] options = {"This One", "All Future", "Cancel"};
            int selection = JOptionPane.showOptionDialog(null, 
                    "Do you want to update only this task, or all future ones as well?", 
                    "Update Repeating Task", 
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, 
                    options, 
                    options[0]);
           
            //if user decides to cancel, add the row back and exit
            if (selection == 2) {
                tasks.add(rowSelected, original);
                return;
                
            //if user decides to update all future selections, set flag to true
            } else if (selection == 1) {
                updateFuture = true;
            }
        }

        
        if (updateFuture) {
            //if the update flag is set and the original task is not 
            //repeating, create future tasks
            if (!original.repeating) {
                task.createFuture(tasks);
            //otherwise the original is repeating
            } else {
                //if the new one is also repeating, undate the future tasks
                if (task.repeating) {
                    task.updateFuture(tasks, original);
                    
                //otherwise delete the future tasks
                } else {
                    original.deleteFuture(tasks);
                }
            }
        }
        
        //make sure that the first task exists
        tasks.add(rowSelected, task);

        writeTasks();
        clearDisplay();
        updateDisplay();
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed

        //get the number of selected rows
        int rowCount = tableParentAddTasks.getSelectedRowCount();
        
        //if there is more than one row while there are still rows, 
        //get the first selected row and deletes it
        if (rowCount > 1) {
            while (rowCount > 0) {
                int rowSelected = tableParentAddTasks.getSelectedRow();

                if (rowSelected >= 0) {
                    tasks.remove(rowSelected);
                    model.removeRow(rowSelected);
                }

                rowCount = tableParentAddTasks.getSelectedRowCount();
            } 
            
        //otherwise, determine if the task is repeating
        } else {
            
            //get the currently selected row
            int rowSelected = tableParentAddTasks.getSelectedRow();
            
            //remove the task for the row
            Task taskToDelete = tasks.remove(rowSelected);
            
            //if the task is repeating, ask the user what they want to do
            if (taskToDelete.repeating) {
                String[] options = {"This One", "All Future", "Cancel"};
                int selection = JOptionPane.showOptionDialog(null, 
                        "Do you want to update only this task, or all future ones as well?", 
                        "Update Repeating Task", 
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, 
                        options, 
                        options[0]);
                
                //if the user decides to cancel, add the task back and exit
                if (selection == 2) {
                    tasks.add(taskToDelete);
                    return;
                    
                //if the user selects all future, delete the rest of the child tasks 
                } else if (selection == 1) {
                    taskToDelete.deleteFuture(tasks);
                }
            }
        }
        
        writeTasks();
        clearDisplay();
        updateDisplay();
        
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void tableParentAddTasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableParentAddTasksMouseClicked
        // TODO add your handling code here:
        //handles the user selecting a row in the table
        int numberOfRowsSelected = tableParentAddTasks.getSelectedRowCount();
        if (numberOfRowsSelected > 1) {
            clearDisplay();
            return;
        }
        
        int rowSelected = tableParentAddTasks.getSelectedRow();

        Task task = tasks.get(rowSelected);
        
        //sets text fields/combo boxes to the information from the selected row
        comboBoxCategory.setSelectedItem(task.getCategory().toString());
        comboBoxMonth.setSelectedItem(Conversions.convertMonthToString(task.getMonth()));
        comboBoxYear.setSelectedItem(Integer.toString(task.getYear()));
        comboBoxDay.setSelectedItem(Integer.toString(task.getDay()));
        comboBoxRepeat.setSelectedItem(task.getRepeating() ? "Yes" : "No");
        comboBoxAuthentication.setSelectedItem(task.getAuthentication());
        fieldInstructions.setText(task.getInstructions());
    }//GEN-LAST:event_tableParentAddTasksMouseClicked

    private Task getTask() {

        //gets task from user input form
        Category category = Category.CreateFromString(comboBoxCategory.getSelectedItem().toString());
        
        int month = Conversions.convertStringToMonth((String) comboBoxMonth.getSelectedItem());
        int year = Integer.parseInt((String)comboBoxYear.getSelectedItem());
        int day = Integer.parseInt((String)comboBoxDay.getSelectedItem());
        
        boolean repeating;
        String repeatingString = comboBoxRepeat.getSelectedItem().toString();
        repeating = repeatingString.equals("Yes");
        
        boolean authentication;
        String authenticationString = comboBoxAuthentication.getSelectedItem().toString();
        authentication = authenticationString.equals("Yes");
        
        
        String instructions = fieldInstructions.getText();
        
        Task task = new Task(month, day, year, category, instructions, repeating, authentication);
        return task;
        
    }

        
    //reads the tasks in from disk
    private void readFromFile(){

        tasks = FileIO.readTasks();
       
        //if there are no tasks, create empty array
        if (tasks == null) {
            tasks = new ArrayList<>();
        }
    }
    
    
    //clear the text of an entry
    private void clearDisplay() {
        
        //sets user form back to default
        comboBoxCategory.setSelectedIndex(0);
        comboBoxMonth.setSelectedIndex(0);
        comboBoxYear.setSelectedIndex(0);
        comboBoxDay.setSelectedIndex(0);
        comboBoxRepeat.setSelectedIndex(0);
        comboBoxAuthentication.setSelectedIndex(0);
        fieldInstructions.setText("");
        
    }
    
    //sorts and filters the data and updates the display
    public void updateDisplay() {
        
        int count;
        count = model.getRowCount();
      
        //Remove all rows from existing table
        for (int removeItem = 0; removeItem < count; removeItem++) {
            model.removeRow(0);
        }
        
        //Goes through tasks and separates them based on selection
        for(Task task : tasks){
            if (Filters.passesTaskFilter(task, displayFilter) &&
                Filters.passesCategoryFilter(task, filterCategories ? categoryFilter : null) &&
                Filters.passesMonthFilter(task, monthToFilter) &&
                Filters.passesDayFilter(task, dayToFilter) &&
                Filters.passesYearFilter(task, yearToFilter)) {
               
                // If the transaction passes all the filters, add it to the model
                model.addRow(new Object[]{  
                    Conversions.convertMonthToString(task.getMonth()),
                    task.getYear(),
                    task.getDay(),
                    task.getAuthentication() ? "Yes" : "No",
                    task.getInstructions(),
                    task.getCategory(),
                    task.getRepeating() ? "Yes" : "No"
                });
            }
        }
     }
    
    
    private void writeTasks() {
        //sorts the tasks
        tasks.sort(Comparator.comparing(Task::getYear)
                .thenComparing(Task::getMonth)
                .thenComparing(Task::getDay)
                .thenComparing(Task::getCategory)
                .thenComparing(Task::getRepeating)
                .thenComparing(Task::getAuthentication)
                );
        
        //writes the sorted list to disk
        FileIO.writeTasks(tasks);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParentAddTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParentAddTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParentAddTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParentAddTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
            // ParentAddTasks dialog = new ParentAddTasks(new javax.swing.JFrame(), true);
            // dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            // @Override
            // public void windowClosing(java.awt.event.WindowEvent e) {
            //  System.exit(0);
            // }
            // });
            // dialog.setVisible(true);
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JComboBox<String> comboBoxAuthentication;
    private javax.swing.JComboBox<String> comboBoxCategory;
    private javax.swing.JComboBox<String> comboBoxDay;
    private javax.swing.JComboBox<String> comboBoxMonth;
    private javax.swing.JComboBox<String> comboBoxRepeat;
    private javax.swing.JComboBox<String> comboBoxYear;
    private javax.swing.JTextField fieldInstructions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableParentAddTasks;
    // End of variables declaration//GEN-END:variables
}
